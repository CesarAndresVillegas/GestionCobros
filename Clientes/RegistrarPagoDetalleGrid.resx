<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="button1.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        hFTuaDrQ7r8gQ4t2qb18SgAAAABJRU5ErkJggg==
</value>
  </data>
</root>